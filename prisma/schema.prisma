// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    bookings      Booking[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id    BigInt @id @default(autoincrement())
    name  String @unique
    menus Menu[]
}

model Menu {
    id          BigInt      @id @default(autoincrement())
    name        String
    description String?
    price       Decimal
    category    Category    @relation(fields: [categoryId], references: [id])
    categoryId  BigInt
    images      MenuImage[]
}

model MenuImage {
    id        BigInt  @id @default(autoincrement())
    menu      Menu    @relation(fields: [menuId], references: [id])
    menuId    BigInt
    imageUrl  String
    imageBlur String?
}

model Booking {
    id                 BigInt               @id @default(autoincrement())
    user               User?                @relation(fields: [userId], references: [id])
    userId             String?
    numberOfGuests     Int
    bookingDate        DateTime
    timeSlot           timeSlot[]
    status             BookingStatus
    additionalDetails  String?
    createdAt          DateTime             @default(now())
    payments           Payment[]
    paymentIntents     PaymentIntent[]
    transactionHistory TransactionHistory[]
    // preference         Preference?
}

model Payment {
    id              BigInt   @id @default(autoincrement())
    booking         Booking  @relation(fields: [bookingId], references: [id])
    bookingId       BigInt
    stripePaymentId String   @unique
    amount          Decimal
    currency        String
    status          String
    paymentMethod   String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @default(now())
}

model PaymentIntent {
    id             BigInt   @id @default(autoincrement())
    stripeIntentId String   @unique
    booking        Booking  @relation(fields: [bookingId], references: [id])
    bookingId      BigInt
    amount         Decimal
    currency       String
    status         String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @default(now())
}

model TransactionHistory {
    id                  BigInt   @id @default(autoincrement())
    booking             Booking  @relation(fields: [bookingId], references: [id])
    bookingId           BigInt
    stripeTransactionId String   @unique
    amount              Decimal
    currency            String
    status              String
    failureReason       String?
    createdAt           DateTime @default(now())
    updatedAt           DateTime @default(now())
}

enum BookingStatus {
    BOOKING_COMPLETED
    BOOKING_CANCELLED
    BOOKING_PENDING
    Booking_FAILED
}

enum Preference {
    KIDS_FRIENDLY
    LOW_MUSIC
}

enum timeSlot {
    TEN_AM    @map("10:00")
    ELEVEN_AM @map("11:00")
    TWELVE_PM @map("12:00")
    ONE_PM    @map("01:00")
    TWO_PM    @map("02:00")
    FOUR_PM   @map("04:00")
    FIVE_PM   @map("05:00")
    SIX_PM    @map("06:00")
    SEVEN_PM  @map("07:00")
    EIGHT_PM  @map("08:00")
}
